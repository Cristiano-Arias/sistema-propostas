// üîÑ Fun√ß√£o de Migra√ß√£o de Dados - Compatibilidade com Sistema Antigo

function migrarDadosParaNovasChaves() {
    console.log('üîÑ Iniciando migra√ß√£o de dados para novas chaves...');
    
    try {
        // 1. Migrar Fornecedores
        const fornecedoresAntigos = localStorage.getItem('fornecedores_cadastrados');
        if (fornecedoresAntigos && !localStorage.getItem('sistema_fornecedores')) {
            localStorage.setItem('sistema_fornecedores', fornecedoresAntigos);
            console.log('‚úÖ Fornecedores migrados: fornecedores_cadastrados ‚Üí sistema_fornecedores');
        }
        
        // 2. Migrar Usu√°rios Fornecedores
        const usuariosAntigos = localStorage.getItem('usuarios_fornecedores');
        if (usuariosAntigos && !localStorage.getItem('sistema_usuarios_fornecedores')) {
            localStorage.setItem('sistema_usuarios_fornecedores', usuariosAntigos);
            console.log('‚úÖ Usu√°rios fornecedores migrados: usuarios_fornecedores ‚Üí sistema_usuarios_fornecedores');
        }
        
        // 3. Migrar Processos
        const processosAntigos = localStorage.getItem('processos_licitatorios');
        if (processosAntigos && !localStorage.getItem('sistema_processos')) {
            localStorage.setItem('sistema_processos', processosAntigos);
            console.log('‚úÖ Processos migrados: processos_licitatorios ‚Üí sistema_processos');
        }
        
        // 4. Migrar Propostas
        const propostasAntigas = localStorage.getItem('propostas_fornecedores');
        if (propostasAntigas && !localStorage.getItem('sistema_propostas')) {
            localStorage.setItem('sistema_propostas', propostasAntigas);
            console.log('‚úÖ Propostas migradas: propostas_fornecedores ‚Üí sistema_propostas');
        }
        
        // 5. Migrar Propostas Completas
        const propostasCompletasAntigas = localStorage.getItem('propostas_completas');
        if (propostasCompletasAntigas && !localStorage.getItem('sistema_propostas_completas')) {
            localStorage.setItem('sistema_propostas_completas', propostasCompletasAntigas);
            console.log('‚úÖ Propostas completas migradas: propostas_completas ‚Üí sistema_propostas_completas');
        }
        
        // 6. Migrar An√°lises IA
        const analisesAntigas = localStorage.getItem('analises_ia');
        if (analisesAntigas && !localStorage.getItem('sistema_analises_ia')) {
            localStorage.setItem('sistema_analises_ia', analisesAntigas);
            console.log('‚úÖ An√°lises IA migradas: analises_ia ‚Üí sistema_analises_ia');
        }
        
        console.log('‚úÖ Migra√ß√£o de dados conclu√≠da com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro durante migra√ß√£o de dados:', error);
    }
}

// Fun√ß√£o para carregar dados com fallback autom√°tico
function carregarComFallback(chaveNova, chaveAntiga, padrao = []) {
    try {
        // Tentar carregar da chave nova primeiro
        let dados = localStorage.getItem(chaveNova);
        
        // Se n√£o existir, tentar chave antiga
        if (!dados) {
            dados = localStorage.getItem(chaveAntiga);
            
            // Se encontrou na chave antiga, migrar para nova
            if (dados) {
                localStorage.setItem(chaveNova, dados);
                console.log(`üîÑ Dados migrados automaticamente: ${chaveAntiga} ‚Üí ${chaveNova}`);
            }
        }
        
        return dados ? JSON.parse(dados) : padrao;
        
    } catch (error) {
        console.error(`‚ùå Erro ao carregar dados (${chaveNova}/${chaveAntiga}):`, error);
        return padrao;
    }
}

// Executar migra√ß√£o automaticamente quando o script for carregado
if (typeof window !== 'undefined') {
    // Executar ap√≥s 1 segundo para garantir que o sistema esteja carregado
    setTimeout(migrarDadosParaNovasChaves, 1000);
}

